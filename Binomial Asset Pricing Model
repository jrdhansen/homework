#Messing around with the Binomial Asset Pricing Model

#Setting up the variables
import numpy as np
import math
observed_price = 40
strike_price = 41
Rf = .08
sigma = .3
T = 1
N = 3
H = T/N
up = math.exp((Rf*H)+ sigma*(H**(.5)))
down = math.exp((Rf*H)- sigma*(H**(.5)))
probstar = (math.exp(Rf*H)-down)/(up-down)

#setting the array to zero
binomial_tree = np.zeros((N+1,N+1))
#calculating out into the future
j = 1
binomial_tree[0][0] = observed_price
for i in range(1,N):
	binomial_tree[0][i] = (binomial_tree[0][(i-1)])*up and binomial_tree[j][i] = (binomial_tree[0][(i-1)])*down
	observed_price = #this needs to reassign the observed price...
	j+= 1
#can i have it refer to the one before it?

#the if statement for payoff European
end_column = binomial_tree[0:N][N]
for i in range(N):
	if end_column[i] > strike_price:
		payoff = end_column - strike_price
	else:
		payoff = 0

