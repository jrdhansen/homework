#Messing around with the Binomial Asset Pricing Model

#Setting up the variables
import numpy as np
import math
observed_price = 40
strike_price = 41
Rf = .08
sigma = .3
T = 1
N = 3
H = T/N
up = math.exp((Rf*H)+ sigma*(H**(.5)))
down = math.exp((Rf*H)- sigma*(H**(.5)))
probstar = (math.exp(Rf*H)-down)/(up-down)

#setting the array to zero
binomial_tree = np.zeros((N+1,N+1))
j = (N//20)
#calculating out into the future
for i in range(N+1):
	binomial_tree[i][j+1] = observed_price*up and binomial_tree[i][j-1] = observed_price*down
	observed_price = #this needs to reassign the observed price...
	


#the if statement for payoff European
end_column = binomial_tree[0:N][N]
for i in endcolumn:
	if Cu or Cd > strike_price:
		payoff = Cu or Cd - strike_price
	else:
		payoff = 0

