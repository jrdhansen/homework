#Messing around with the Binomial Asset Pricing Model
import numpy as np
from scipy.stats import binom

class StrawberryOption(object):
	def __init__(self, strike, expiry):
		self.strike = strike
		self.expiry = expiry
	def value(self,spot):
		pass

class StrawberryCallOption(VanillaOption):
	def value(self, spot):
		max = np.maximum(spot - self.strike, 0.0)
		return max
class StrawberryPutOption(VanillaOption):
	def value(self, spot):
		max = np.maximum(self.strike - spot, 0.0)
		return max

def AmericanBinomial(option, S, Rf, beta, sigma, T, N):
	H = T/N
	up = np.exp((Rf-beta)*H+ sigma*(np.sqrt(H))) 
	down = np.exp((Rf-beta)*H- sigma*(np.sqrt(H)))
	pu = (np.exp((Rf-beta)*H)-down)/(up-down)
	pd = 1- pu
	discount = np.exp(-Rf * H)
	du = pu * discount
	dp = pd * discount
	numSteps = N
	numNodes = numSteps + 1
	spot_price = np.zeros(numNodes)
	payoff = np.zeros(numNodes)
	for i in range(numNodes):
		spot_price[i] = S * (up ** (numSteps - i)) * (down ** (i))
		payoff[i] = option.value(spot_price[i])
	for i in range((numSteps-1), -1, -1):
		for j in range(i+1):
			payoff[j] = du * payoff[j] + dp * payoff[j+1]
			spot_price[j] = spot_price[j] / up
			payoff[j] = np.maximum(payoff[j], option.value(spot_price[j]))
	return payoff[0]
        
	
	
def main():
	P = 41
	K = 40
	Rf = 0.08
	T = 1
	N = 3
	beta = 0.0
	sigma = 0.30
	option = StrawberryPutOption(K, T)
	callPrice = AmericanBinomial(option, P, Rf, beta, sigma, T, N)
	print("The American Binomial Price is = {0:.4f}".format(callPrice))
	
main()
